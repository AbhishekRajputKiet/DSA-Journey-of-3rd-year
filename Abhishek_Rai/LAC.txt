/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */

class Solution {
public:
       bool findPath(TreeNode* root,vector<TreeNode*> &path, TreeNode* p){
        if(root==NULL)
            return false; 
        
        path.push_back(root);
        if(root==p){
            return true;
        }
        
        if(findPath(root->left,path,p) || findPath(root->right,path,p))
            return true;
        
         path.pop_back();
        return false;
    }
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        if(root==NULL)
           return root;
        
        vector<TreeNode*> path1;
        vector<TreeNode*> path2;
        
        findPath(root,path1,p);
        findPath(root,path2,q);
        
        TreeNode* ans=NULL; 
        
        for(int i=0;i<path1.size() && i<path2.size();i++){
            if(path1[i]==path2[i])
                ans=path1[i];
            else
                break;
        }
        
        return ans;
    }
};